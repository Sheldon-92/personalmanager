"""测试平台片段生成模块"""

import json
import pytest
from pm.agent.platform_snippets import (
    to_claude,
    to_gemini,
    to_gemini_script,
    validate_platform_output
)


class TestPlatformSnippets:
    """平台片段生成测试套件"""

    def setup_method(self):
        """设置测试环境"""
        # 创建测试用的编译后提示
        self.test_doc = """# PersonalManager Expert — Project Instructions

## 1) 角色与职责
- 您是 PersonalManager 专家助手
- 协助用户管理任务和项目

## 2) 启动仪式
会话开始时按顺序执行：
1. 执行 `pm doctor` - 系统诊断
2. 执行 `pm today --count 3` - 今日推荐

## 3) 自然语言→命令映射
- 置信度 ≥ 0.8: 直接执行
- 置信度 0.5-0.8: 先确认

## 4) 错误处理与降级
- E1xxx: 配置错误 → 引导运行 `pm setup`

## 5) 隐私与安全
- 外部调用策略: user_consent
- 数据保留: session_only"""

    def test_to_claude_basic(self):
        """测试 Claude 平台输出生成"""
        result = to_claude(self.test_doc)

        # 验证结果类型
        assert isinstance(result, str)

        # 验证包含必要元素
        assert "PersonalManager Agent Instructions" in result
        assert "Generated by pm agent prompt compiler" in result
        assert "DO NOT EDIT MANUALLY" in result

        # 验证包含原始内容
        assert "角色与职责" in result
        assert "启动仪式" in result
        assert "隐私与安全" in result

        # 验证包含 Claude 特定说明
        assert "Claude 平台特定说明" in result
        assert "工具调用" in result
        assert "路径处理" in result

    def test_to_claude_format(self):
        """测试 Claude 输出格式"""
        result = to_claude(self.test_doc)

        # 验证 Markdown 格式
        lines = result.split('\n')

        # 检查注释头部
        assert lines[0].startswith("<!--")
        assert any("-->" in line for line in lines[:5])

        # 检查分隔符
        assert "---" in result

        # 检查标题格式
        assert any(line.startswith("#") for line in lines)

    def test_to_gemini_basic(self):
        """测试 Gemini 平台输出生成"""
        result = to_gemini(self.test_doc)

        # 验证结果类型
        assert isinstance(result, dict)

        # 验证顶级键
        assert "_comment" in result
        assert "_generated_by" in result
        assert "_warning" in result
        assert "personalmanager" in result
        assert "_append_strategy" in result

        # 验证 personalmanager 配置
        pm_config = result["personalmanager"]
        assert pm_config["enabled"] is True
        assert pm_config["version"] == "1.0"
        assert "system_prompt" in pm_config
        assert pm_config["system_prompt"] == self.test_doc

    def test_to_gemini_platform_specific(self):
        """测试 Gemini 平台特定配置"""
        result = to_gemini(self.test_doc)
        pm_config = result["personalmanager"]

        # 验证平台特定配置
        assert "platform_specific" in pm_config
        platform = pm_config["platform_specific"]

        # 模型偏好
        assert "model_preferences" in platform
        prefs = platform["model_preferences"]
        assert "temperature" in prefs
        assert "max_tokens" in prefs
        assert 0 <= prefs["temperature"] <= 1

        # 工具集成
        assert "tool_integration" in platform
        tools = platform["tool_integration"]
        assert tools["command_prefix"] == "pm"
        assert tools["auto_confirm"] is False

        # 上下文管理
        assert "context_management" in platform
        context = platform["context_management"]
        assert context["preserve_workspace"] is True

    def test_to_gemini_features(self):
        """测试 Gemini 功能开关"""
        result = to_gemini(self.test_doc)
        features = result["personalmanager"]["features"]

        assert features["startup_ritual"] is True
        assert features["natural_language_routing"] is True
        assert features["error_recovery"] is True
        assert features["privacy_mode"] is True

    def test_to_gemini_error_handling(self):
        """测试 Gemini 错误处理映射"""
        result = to_gemini(self.test_doc)
        error_handling = result["personalmanager"]["error_handling"]

        # 验证错误码映射
        assert "E1xxx" in error_handling
        assert error_handling["E1xxx"]["action"] == "suggest_setup"
        assert error_handling["E1xxx"]["command"] == "pm setup"

        assert "E2xxx" in error_handling
        assert "E3xxx" in error_handling
        assert "E4xxx" in error_handling

    def test_to_gemini_append_strategy(self):
        """测试 Gemini 追加策略"""
        result = to_gemini(self.test_doc)
        strategy = result["_append_strategy"]

        assert "description" in strategy
        assert "merge_rules" in strategy
        assert isinstance(strategy["merge_rules"], list)
        assert len(strategy["merge_rules"]) > 0

        # 验证包含合并示例命令
        assert "example_command" in strategy
        assert "jq" in strategy["example_command"]

    def test_to_gemini_script_basic(self):
        """测试 Gemini 脚本生成"""
        result = to_gemini_script(self.test_doc)

        # 验证结果类型
        assert isinstance(result, str)

        # 验证脚本内容
        assert "#!/bin/bash" in result
        assert "PersonalManager Gemini 配置追加脚本" in result
        assert "set -e" in result

        # 验证包含配置内容（在 JSON 中）
        assert "PersonalManager Expert" in result
        assert "角色与职责" in result

        # 验证包含 jq 命令
        assert "jq" in result
        assert "command -v jq" in result

        # 验证备份逻辑
        assert "BACKUP_FILE" in result
        assert "cp \"$GEMINI_CONFIG\" \"$BACKUP_FILE\"" in result

    def test_to_gemini_script_safety(self):
        """测试 Gemini 脚本安全性"""
        result = to_gemini_script(self.test_doc)

        # 验证安全措施
        assert "set -e" in result  # 错误时退出
        assert "备份现有配置" in result
        assert "验证生成的 JSON" in result
        assert "jq empty" in result  # JSON 验证

        # 验证错误处理
        assert "配置合并失败" in result
        assert "exit 1" in result

    def test_validate_platform_output_claude(self):
        """测试 Claude 输出验证"""
        # 有效输出
        valid_output = to_claude(self.test_doc)
        assert validate_platform_output("claude", valid_output) is True

        # 无效输出 - 错误类型
        assert validate_platform_output("claude", {"not": "string"}) is False

        # 无效输出 - 缺少必要标记
        invalid_output = "Some random text without required markers"
        assert validate_platform_output("claude", invalid_output) is False

    def test_validate_platform_output_gemini(self):
        """测试 Gemini 输出验证"""
        # 有效输出
        valid_output = to_gemini(self.test_doc)
        assert validate_platform_output("gemini", valid_output) is True

        # 无效输出 - 错误类型
        assert validate_platform_output("gemini", "not a dict") is False

        # 无效输出 - 缺少必要键
        invalid_output = {"some": "dict"}
        assert validate_platform_output("gemini", invalid_output) is False

        # 部分有效输出
        partial_output = {
            "personalmanager": {},
            "_comment": "test"
            # 缺少 _append_strategy
        }
        assert validate_platform_output("gemini", partial_output) is False

    def test_validate_platform_output_unknown(self):
        """测试未知平台验证"""
        assert validate_platform_output("unknown", "any") is False

    def test_to_claude_empty_doc(self):
        """测试空文档处理"""
        result = to_claude("")

        # 应该仍能生成有效输出
        assert isinstance(result, str)
        assert "PersonalManager Agent Instructions" in result
        assert "Claude 平台特定说明" in result

    def test_to_gemini_empty_doc(self):
        """测试空文档处理"""
        result = to_gemini("")

        # 应该仍能生成有效配置
        assert isinstance(result, dict)
        assert "personalmanager" in result
        assert result["personalmanager"]["system_prompt"] == ""

    def test_to_claude_unicode(self):
        """测试 Unicode 字符处理"""
        unicode_doc = "测试中文内容 🚀 émojis 和特殊字符 ñ"
        result = to_claude(unicode_doc)

        assert unicode_doc in result
        assert "🚀" in result
        assert "中文" in result

    def test_to_gemini_unicode(self):
        """测试 Gemini Unicode 处理"""
        unicode_doc = "测试中文内容 🚀 émojis"
        result = to_gemini(unicode_doc)

        # JSON 应正确处理 Unicode
        json_str = json.dumps(result, ensure_ascii=False)
        assert "中文" in json_str
        assert "🚀" in json_str

    def test_to_gemini_script_escaping(self):
        """测试脚本中的特殊字符转义"""
        doc_with_quotes = 'Test with "quotes" and \'apostrophes\''
        result = to_gemini_script(doc_with_quotes)

        # 验证正确转义
        assert result  # 不应该因为引号而失败

        # 验证 HEREDOC 使用
        assert "<<'END_SNIPPET'" in result


if __name__ == "__main__":
    pytest.main([__file__, "-v"])